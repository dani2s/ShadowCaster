#!/usr/bin/python
'''
    ShadowCaster implements an evolutionary model to calculate bayesian likelihoods
    for each 'alien genes' with an unsual sequence composition according to 
    the host genome background to detect HGT events in prokaryotes. 
    Copyright (C) 2018  Daniela Sanchez and Aminael Sanchez

    ShadowCaster is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ShadowCaster is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

    Questions? Please contact asanchez2utpl.edu.ec

'''
import os
import datetime
import sys
import inspect
import subprocess

from shadowcaster.parser import arguments
from shadowcaster.check import ValidateFiles
from shadowcaster.parametric import ParametricMethods
from shadowcaster.codon_usage import CodonUsage
from shadowcaster.detect_aliens import alienSVM
from shadowcaster.orthologs import Orthologs
from shadowcaster.orthologs_parse import ParseOrthologsResults
from shadowcaster.blast_aliens import BlastAtyipical
from shadowcaster.likelihood import phyloShadowing

def checkPath():
    rc = subprocess.call(['which', 'orthomcl-pipeline'])
    if rc == 0:
        print 'orthomcl-pipeline installed!\n'
    else:
        print 'orthomcl-pipeline missing in path! Please check the path in .profile or .bash_profile'
        sys.exit(0)

def main(config):
    
    #Make working directory
    wDir = os.path.join(os.getcwd(), datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S'))
    os.mkdir(wDir)      
    os.chdir(wDir)
        
    #Create log file
    logFile = open('log.txt', 'w')
    logFile.write('Arguments of ShadowCaster \nConfiguration file:\n')
    for key, value in config.iteritems():
        logFile.write('%s\t%s\n' %(key,value))
    logFile.close()
        
    
    print >> sys.stderr, "Step 1: Checking input files\n"
    test = ValidateFiles(config['queryProteome'], config['queryGenome'],config['proteomes'])
    test.checkProtein()
       

    #Create folder for parametric's results
    os.mkdir('parametric/')
    os.chdir('parametric/')
    phase1 = os.getcwd()

    print >> sys.stderr, "Step 2: Starting Composition Methods"
    
    #Instance Parametric class  (13sec)
    faaMerge = 'mergeCDS.fasta' 
    print >> sys.stderr, "====== K-mer frequencies are calculated ======"
    kmer = ParametricMethods(config['queryGenome'], faaMerge,'chi2',4,reverse=False)
    kmerDf = kmer.metricMeasure()
    

    #Instance Codon Usage class (5 sec)
    print >> sys.stderr, "========  Codon Usage is calculated  ========="
    CU = CodonUsage(config['queryGenome'])
    CU.metrics()
    
    
    #Call R script  (6 sec)
    print >> sys.stderr, "=== Detect alien genes with One Class SVM  ===\n"
    phase1Result = '%s/alien_genes.fasta' %phase1
    alienSVM(kmerDf, config['queryGenome'], config['nuSVM'])
    
    os.remove('mergeCDS.fasta')
    os.remove('codon_cds.csv')
    os.remove('codon_mergeSeq.csv')

    print >> sys.stderr, "Composition results can be found in parametric folder\n"
    
 
    os.chdir('..')
    
    
    os.mkdir('phylogenetic')
    os.chdir('phylogenetic')
    
    print >> sys.stderr, "Step 3: Starting Phylogenetic Methods"
    
    print >> sys.stderr, "============== Starting OrthoMCL ============="
    #Instance Orthologs class (1 hour each round 10-15 min)
    orthoMcl = Orthologs(config['orthomcl_config'], config['queryProteome'], config['proteomes'])
    orthoMcl.performOrthoMcl() 
    print >> sys.stderr, "============== OrthoMCL finished =============\n"

    #Instance Parse orthologs results (13 min)
    print >> sys.stderr, "============ Parse OrthoMCL results =========="
    orthoResults = ParseOrthologsResults(config['proteomes'], config['queryProteome'])
    listProteomes = orthoResults.getIdentity()
    
    
    #Instance Blast atypical class (5 min)
    print >> sys.stderr, "=============== Perform Blastp ===============\n"
    atypical = BlastAtyipical(listProteomes, phase1Result, config['proteomes'], config['blastp'], config['db26'])
    atypical.performBlastp()
    
    #Function for calculating likelihood (1min)
    phyloShadowing('orthologs_probabilities.csv', 'alien_svm.csv', config['queryGenome'])
    
    
    print >> sys.stderr, "Phylogenetic results can be found in phylogenetic folder\n"
    
    logPath= os.path.join(wDir, "log.txt")
    finalResultsPath = os.path.join(wDir, "phylogenetic/hgt_candidates.csv")
    fastaResult = os.path.join(wDir, "phylogenetic/shadowcaster_predictions.fasta")
    
    print >> sys.stderr, "Parameters used can be viewed in %s" % logPath
    print >> sys.stderr, "HGT candidates can be found in %s and a fasta file in %s\n" %(finalResultsPath,fastaResult)

if __name__ == '__main__':
    a = datetime.datetime.now()
    os.system('figlet -c ShadowCaster')
    print 'Date:%s' %a
    config, args = arguments()
    checkPath()
    results = main(config)
    b = datetime.datetime.now()
    c = b - a
    #print c.seconds
    print >> sys.stderr, "\nShadowCaster finished"
    print 'Took %s to complete' %c
    

